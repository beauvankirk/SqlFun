<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>SqlFun</name></assembly>
<members>
<member name="M:SqlFun.DataContext.rollback(SqlFun.DataContext)">
 <summary>
 Rollbacks current transaction.
 </summary>
 <param name="dc">
 The data context object.
 </param>
</member>
<member name="M:SqlFun.DataContext.isInTransaction(SqlFun.DataContext)">
 <summary>
 Determines if the data context is in transaction.
 </summary>
 <param name="dc">
 The data context object.
 </param>
</member>
<member name="M:SqlFun.DataContext.create(System.Data.IDbConnection)">
 <summary>
 Creates a new DataContext object.
 </summary>
 <param name="connection">
 The database connection.
 </param>
</member>
<member name="M:SqlFun.DataContext.commit(SqlFun.DataContext)">
 <summary>
 Commits a transaction.
 </summary>
 <param name="dc">
 The data context object.
 </param>
</member>
<member name="M:SqlFun.DataContext.beginTransaction(Microsoft.FSharp.Core.FSharpOption{System.Data.IsolationLevel},SqlFun.DataContext)">
 <summary>
 Starts a transaction on the connection. 
 Returns new data context object with a transaction field assigned to current transaction.
 </summary>
 <param name="isolationLevel">
 Transaction isolation level.
 </param>
 <param name="dc">
 The data context object.
 </param>
</member>
<member name="T:SqlFun.DataContext">
 <summary>
 Manages open connection.
 </summary>
</member>
<member name="T:SqlFun.Crud">
 <summary>
 Generating insert/update/select/delete operations from a record structure.
 </summary>
</member>
<member name="M:SqlFun.ComputationBuilder.AsyncDb.run``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,Microsoft.FSharp.Control.FSharpAsync{``1}})">
 <summary>
 Prepares data context and runs a function on it asynchronously.
 </summary>
 <param name="createConnection">
 The function responsible for creating a database connection.
 </param>
 <param name="f">
 A function performing some database operation asynchronously.
 </param>
</member>
<member name="M:SqlFun.ComputationBuilder.AsyncDb.inTransactionWith``1(System.Data.IsolationLevel,Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,Microsoft.FSharp.Control.FSharpAsync{``0}},SqlFun.DataContext)">
 <summary>
 Wraps a database operation in a transaction asynchronously.
 </summary>
 <param name="isolationLevel">
 Transaction isolation level.
 </param>
 <param name="f">
 A function performing some database operation asynchronously.
 </param>
 <param name="dc">
 The data context object.
 </param>
</member>
<member name="M:SqlFun.ComputationBuilder.AsyncDb.inTransaction``1(Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,Microsoft.FSharp.Control.FSharpAsync{``0}},SqlFun.DataContext)">
 <summary>
 Wraps a database operation in a transaction asynchronously.
 </summary>
 <param name="f">
 A function performing some database operation asynchronously.
 </param>
 <param name="dc">
 The data context object.
 </param>
</member>
<member name="M:SqlFun.ComputationBuilder.AsyncDb.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,Microsoft.FSharp.Control.FSharpAsync{``0}},SqlFun.DataContext)">
 <summary>
 Function transforming value inside a monad.
 </summary>
 <param name="f">Function transforming a value.</param>
 <param name="v">Value wrapped in a monad.</param>
</member>
<member name="M:SqlFun.ComputationBuilder.DbAction.run``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,``1})">
 <summary>
 Prepares data context and runs a function on it.
 </summary>
 <param name="createConnection">
 The function responsible for creating a database connection.
 </param>
 <param name="f">
 A function performing some database operation.
 </param>
</member>
<member name="M:SqlFun.ComputationBuilder.DbAction.inTransactionWith``1(System.Data.IsolationLevel,Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,``0},SqlFun.DataContext)">
 <summary>
 Wraps a database operation in a transaction.
 </summary>
 <param name="isolationLevel">
 Transaction isolation level.
 </param>
 <param name="f">
 A function performing some database operation.
 </param>
 <param name="dc">
 The data context object.
 </param>
</member>
<member name="M:SqlFun.ComputationBuilder.DbAction.inTransaction``1(Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,``0},SqlFun.DataContext)">
 <summary>
 Wraps a database operation in a transaction.
 </summary>
 <param name="f">
 A function performing some database operation.
 </param>
 <param name="dc">
 The data context object.
 </param>
</member>
<member name="M:SqlFun.ComputationBuilder.DbAction.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,``0})">
 <summary>
 Function transforming value inside a monad.
 </summary>
 <param name="f">Function transforming a value.</param>
 <param name="v">Value wrapped in a monad.</param>
</member>
<member name="P:SqlFun.Queries.GeneratorConfig`1.rowBuilder">
<summary>
 Function generating code creating typed result from data reader.
</summary>
</member>
<member name="P:SqlFun.Queries.GeneratorConfig`1.paramBuilder">
<summary>
 Function generating code creating query parameters from function parameters.
</summary>
</member>
<member name="P:SqlFun.Queries.GeneratorConfig`1.commandTimeout">
<summary>
 The command timeout.
</summary>
</member>
<member name="P:SqlFun.Queries.GeneratorConfig`1.createConnection">
<summary>
 The function providing a database connection used in generation.
</summary>
</member>
<member name="T:SqlFun.Queries.GeneratorConfig`1">
 <summary>
 Values and functions allowing to customize generation of query execution functions.
 </summary>
</member>
<member name="M:SqlFun.Queries.proc``2(SqlFun.Queries.GeneratorConfig{``1},System.String)">
 <summary>
 Generates a function executing stored procedure.
 </summary>
 <typeparam name="'t">
 The function type.
 </typeparam>
 <param name="config">
 The query generation configuration data.
 </param>
 <param name="procedureName">
 The stored procedure to be executed.
 </param>
 <returns>
 A function of type 't executing stored procedure given by procedureName parameter.
 </returns>
</member>
<member name="M:SqlFun.Queries.generateStoredProcCaller``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Linq.Expressions.Expression,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.Linq.Expressions.Expression,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.FSharpFunc{System.Data.IDbCommand,System.Int32}},System.Object}}}}}},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Linq.Expressions.Expression,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.Linq.Expressions.Expression,Microsoft.FSharp.Core.FSharpFunc{System.Object,Microsoft.FSharp.Core.FSharpFunc{System.Data.IDbCommand,System.Int32}},System.Object}}}}}}},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{System.Linq.Expressions.ParameterExpression,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{System.String,System.Tuple{System.Int32,System.Type}},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Type,System.Linq.Expressions.Expression}}}}},Microsoft.FSharp.Core.FSharpFunc{System.Linq.Expressions.ParameterExpression,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpMap{System.String,System.Tuple{System.Int32,System.Type}},Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{System.Type,System.Linq.Expressions.Expression}}}}}},System.String,System.Type)">
 <summary>
 Generates a function executing stored procedure.
 </summary>
 <typeparam name="t">
 The function type.
 </typeparam>
 <param name="createConnection">
 The function providing a database connection used in generation.
 </param>
 <param name="commandTimeout">
 The command timeout.
 </param>
 <param name="procedureName">
 The stored procedure to be executed.
 </param>
 <returns>
 A function of type 't executing stored procedure given by procedureName parameter.
 </returns>
</member>
<member name="M:SqlFun.Queries.sql``2(SqlFun.Queries.GeneratorConfig{``1},System.String)">
 <summary>
 Generates function executing a sql command.
 </summary>
 <typeparam name="'t">
 The function type.
 </typeparam>
 <param name="config">
 The query generation configuration data.
 </param>
 <param name="commandText">
 The sql statement to be executed.
 </param>
 <returns>
 A function of type 't executing command given by commandText parameter.
 </returns>
</member>
<member name="M:SqlFun.Queries.createDefaultConfig``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
 <summary>
 Provides default configuration.
 </summary>
 <param name="connectionBuilder">
 Database connection - can not be left unspecified.
 </param>
</member>
<member name="M:SqlFun.Transforms.Copy`1.From``1(``0)">
 <summary>
 Performs copy.
 </summary>
 <param name="source">
 Source record.
 </param>
</member>
<member name="T:SqlFun.Transforms.Copy`1">
 <summary>
 Makes a copy of a record of one type as another type. When source field  does not exist or has
 different type, than target field, assigns it with default value.
 </summary>
</member>
<member name="T:SqlFun.Transforms.ItemAlias`1">
 <summary>
 Type used to provide "item_" prefix for detail results in conjunction with aliasedAsItem function.
 </summary>
</member>
<member name="M:SqlFun.Transforms.op_GreaterGreaterMinus``4(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2},Microsoft.FSharp.Core.FSharpFunc{``3,``1},``0,``3)">
 <summary>
 Combines two functions transforming query results into one function with more parameters.
 The return value of the second function becomes a second parameter of the first function.
 </summary>
 <param name="f">
 The first result transformation function.
 </param>
 <param name="g">
 The second result transformation function.
 </param>
 <param name="t1">
 The first argument of constructed function.
 </param>
 <param name="t2">
 The second argument of constructed function.
 </param>
</member>
<member name="M:SqlFun.Transforms.op_GreaterMinusGreater``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``1,``2},``3},``0,``2)">
 <summary>
 Combines two functions transforming query results into one function with more parameters.
 The return value of the first function becomes a first parameter of the second function.
 </summary>
 <param name="f">
 The first result transformation function.
 </param>
 <param name="g">
 The second result transformation function.
 </param>
 <param name="t1">
 The first argument of constructed function.
 </param>
 <param name="t2">
 The second argument of constructed function.
 </param>
</member>
<member name="M:SqlFun.Transforms.curry4``5(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2,``3},``4},``0,``1,``2,``3)">
 <summary>
 Converts four-arg tupled function to its curried form.
 </summary>
</member>
<member name="M:SqlFun.Transforms.curry3``4(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1,``2},``3},``0,``1,``2)">
 <summary>
 Converts three-arg tupled function to its curried form.
 </summary>
</member>
<member name="M:SqlFun.Transforms.curry``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2},``0,``1)">
 <summary>
 Converts two-arg tupled function to its curried form.
 </summary>
</member>
<member name="M:SqlFun.Transforms.outParamsOnly``1(System.Int32,``0,Microsoft.FSharp.Core.Unit)">
 <summary>
 Extract output parameters from stored procedure result tuple.
 </summary>
</member>
<member name="M:SqlFun.Transforms.resultOnly``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Int32,Microsoft.FSharp.Core.Unit,``0)">
 <summary>
 Extract result sets from stored procedure result tuple.
 </summary>
</member>
<member name="M:SqlFun.Transforms.merge``4(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,``3},``0,``2)">
 <summary>
 Transforms two single-arg functions to one function with tupled params, returning tuple of results of input functions.
 Used to combine two functions executing sql commands, to further join them or whatever. 
 </summary>
</member>
<member name="M:SqlFun.Transforms.mapAsync``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>
 Transforms a value wrapped in Async object using a given function.
 </summary>
 <param name="f">
 Function transforming wrapped value.
 </param>
 <param name="x">
 Source value.
 </param>
</member>
<member name="M:SqlFun.Transforms.aliasedAsItem``1(Microsoft.FSharp.Collections.FSharpList{SqlFun.Transforms.ItemAlias{``0}})">
 <summary>
 Transforms list by getting an aliasedItem attribute values of each item.
 Used to add "item_" alias to detail set in group.
 </summary>
</member>
<member name="M:SqlFun.Transforms.aliased``2(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
 Transforms list by getting an aliasedItem attribute values of each item.
 Used to add alias defined by PrefixedAttribute of the aliasedItem attribute to detail set in group.
 </summary>
</member>
<member name="M:SqlFun.Transforms.Conventions.group``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,Microsoft.FSharp.Core.FSharpOption{``1}}})">
 <summary>
 Builds parent record list from list of parent * child tuples.
 </summary>
 <param name="pc">
 List of parent * child tuples.
 </param>
</member>
<member name="M:SqlFun.Transforms.Conventions.combine``2(``0,Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>
 Combines a parent record with child record list.
 </summary>
 <param name="p">
 Parent record.
 </param>
 <param name="c">
 Child record list.
 </param>
</member>
<member name="M:SqlFun.Transforms.Conventions.join``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>
 Joins collections of parent and child records by key.
 </summary>
 <remarks>
 Join can be used when:
 - parent record's key has one of id, <parent-name>Id or <parent-name>_id names, 
 - key in child record has <parent-name>Id or <parent-name>_id name,
 - parent has a property of child list type.
</remarks>
 <param name="p">
 Perent record list.
 </param>
 <param name="c">
 Child record list.
 </param>
</member>
<member name="T:SqlFun.Transforms.Conventions">
 <summary>
 Provides result transformation functions based on conventions.
 <summary>
</member>
<member name="M:SqlFun.Transforms.Standard.combineTransforms``5(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,``1},``2},Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``2,``3},``4},``0,``1,``3)">
 <summary>
 Joins three results by combining two joins.
 </summary>
 <param name="join1">
 Function performing first join.
 </param>
 <param name="join2">
 Function performing second join.
 </param>
 <param name="l1">
 First list participating in join.
 </param>
 <param name="l2">
 Second list participating in join.
 </param>
 <param name="l3">
 Third list participating in join.
 </param>
</member>
<member name="M:SqlFun.Transforms.Standard.join``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Core.FSharpFunc{``2,``1},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``2},``0}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``2})">
 <summary>
 Joins two lists by key.
 </summary>
</member>
<member name="M:SqlFun.Transforms.Standard.group``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},``0}},Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,Microsoft.FSharp.Core.FSharpOption{``1}}})">
 <summary>
 Performs grouping on tuple list, taking the first element of a tuple as a key, and the second as a value list.
 </summary>
</member>
<member name="T:SqlFun.Transforms.Standard">
 <summary>
 Provides basic set of result transformation functions.
 </summary>
</member>
<member name="T:SqlFun.Composite.FinalQueryPart`2">
 <summary>
 The part responsible for generating and launching a query.
 </summary>
 <param name="ctx>
 The data context.
 </param>
 <param name="createConnection">
 The function creating a database connection.
 </param>
 <param name="commandTimeout">
 The command timeout.
 </param>
 <param name="paramBuilder">
 Function generating expression creating sql parameters.
 </param>
 <param name="rowBuilder">
 Function generating expression creating row of results. 
 </param>
 <param name="stringify">
 Function converting query template to string. 
 </param>
 <typeparam name="'t">
 The type of a template.
 </typeparam>
</member>
<member name="M:SqlFun.Composite.CommandCache`1.GetOrAdd(System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,`0})">
 <summary>
 Gets a caller function from a cache or generates one, if none exists.
 </summary>
 <param name="command">
 The sql command.
 </param>
 <param name="generator">
 The function, that generates a caller of an sql command.
 </param>
</member>
<member name="T:SqlFun.Composite.CommandCache`1">
 <summary>
 The cache of generated sql caller functions.
 </summary>
</member>
<member name="T:SqlFun.Composite.TransformWithValueQueryPart`2">
 <summary>
 Expands template and applies a specified value.
 </summary>
 <typeparam name="'t">
 The type of a template.
 </typeparam>
</member>
<member name="T:SqlFun.Composite.TransformWithTextQueryPart`1">
 <summary>
 Expands query template with a specified function without adding any parameters 
 and changing query function type.
 </summary>
 <typeparam name="'t">
 The type of a template.
 </typeparam>
</member>
<member name="T:SqlFun.Composite.TransformWithListQueryPart`2">
 <summary>
 Adds parameters from list as hierarchical tuple to a composite query.
 </summary>
 <param name="template">
 The query template.
 </param>
 <param name="items">
 Query parameters.
 </param>
 <param name="next">
 The next query part in a composition.
 </param>
 <typeparam name="'t">
 The type of a template.
 </typeparam>
 <typeparam name="'e">
 The type of an element.
 </typeparam>
</member>
<member name="M:SqlFun.Composite.IQueryPart`1.Combine``1(`0)">
 <summary>
 Combines current query part with a remaining query parts.
 </summary>
</member>
<member name="T:SqlFun.Composite.IQueryPart`1">
 <summary>
 The interface for query specification components.
 </summary>
 <typeparam name="'t">
 The type of a template.
 </typeparam>
</member>
<member name="M:SqlFun.Composite.buildAndRunQuery``1(SqlFun.DataContext,System.String,Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,``0}})">
 <summary> 
 Generates query function, caches it, and invokes
 </summary>
 <param name="ctx">
 The data context.
 </param>
 <param name="cmd">
 Expanded sql template with some placeholders.
 </param>
 <param name="generator">
 The function, that generates a caller of an sql command.
 </param>
</member>
<member name="M:SqlFun.Composite.cleanUpTemplate(System.String)">
 <summary>
 Removes all remaining placeholders from an expanded template, making it valid sql command.
 </summary>
 <param name="template">
 The template to be cleaned-up.
 </param>
</member>
<member name="M:SqlFun.Composite.expandTemplate(System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Expands some template placeholder with a value.
 </summary>
 <remarks>
 If the expansion occurs for the first time, the clause is added before a value.
 Otherwise a value is followed by a separator.
 </remarks>
 <param name="placeholder">
 The placeholder to be replaced with a value.
 </param>
 <param name="clause">
 The clause (e.g. WHERE, ORDER BY, HAVING) to be added when the value is placed for the first time.
 </param>
 <param name="separator">
 The separator injected between subsequent occurrances of a value.
 </param>
 <param name="template">
 The template to be expanded.
 </param>
 <param name="value">
 The value to replace a placeholder.
 </param>
</member>
<member name="M:SqlFun.Composite.withTemplate``2(``0,Microsoft.FSharp.Core.FSharpFunc{SqlFun.DataContext,Microsoft.FSharp.Control.FSharpAsync{SqlFun.Composite.IQueryPart{``0}}})">
 <summary>
 Starts query composition chain by providing sql command template.
 </summary>
 <param name="template">
 The sql command template.
 </param>
 <param name="part">
 The next query part.
 </param>
 <typeparam name="'t">
 The type of a template.
 </typeparam>
</member>
</members>
</doc>
